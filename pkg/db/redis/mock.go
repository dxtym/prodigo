// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package redis

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockClient
func (_mock *MockClient) Get(context1 context.Context, s string) *redis.StringCmd {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *redis.StringCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}
	return r0
}

// MockClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1
//   - s
func (_e *MockClient_Expecter) Get(context1 interface{}, s interface{}) *MockClient_Get_Call {
	return &MockClient_Get_Call{Call: _e.mock.On("Get", context1, s)}
}

func (_c *MockClient_Get_Call) Run(run func(context1 context.Context, s string)) *MockClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_Get_Call) Return(stringCmd *redis.StringCmd) *MockClient_Get_Call {
	_c.Call.Return(stringCmd)
	return _c
}

func (_c *MockClient_Get_Call) RunAndReturn(run func(context1 context.Context, s string) *redis.StringCmd) *MockClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockClient
func (_mock *MockClient) Ping(context1 context.Context) *redis.StatusCmd {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *redis.StatusCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}
	return r0
}

// MockClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - context1
func (_e *MockClient_Expecter) Ping(context1 interface{}) *MockClient_Ping_Call {
	return &MockClient_Ping_Call{Call: _e.mock.On("Ping", context1)}
}

func (_c *MockClient_Ping_Call) Run(run func(context1 context.Context)) *MockClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Ping_Call) Return(statusCmd *redis.StatusCmd) *MockClient_Ping_Call {
	_c.Call.Return(statusCmd)
	return _c
}

func (_c *MockClient_Ping_Call) RunAndReturn(run func(context1 context.Context) *redis.StatusCmd) *MockClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockClient
func (_mock *MockClient) Set(context1 context.Context, s string, v any, duration time.Duration) *redis.StatusCmd {
	ret := _mock.Called(context1, s, v, duration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *redis.StatusCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) *redis.StatusCmd); ok {
		r0 = returnFunc(context1, s, v, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}
	return r0
}

// MockClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1
//   - s
//   - v
//   - duration
func (_e *MockClient_Expecter) Set(context1 interface{}, s interface{}, v interface{}, duration interface{}) *MockClient_Set_Call {
	return &MockClient_Set_Call{Call: _e.mock.On("Set", context1, s, v, duration)}
}

func (_c *MockClient_Set_Call) Run(run func(context1 context.Context, s string, v any, duration time.Duration)) *MockClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockClient_Set_Call) Return(statusCmd *redis.StatusCmd) *MockClient_Set_Call {
	_c.Call.Return(statusCmd)
	return _c
}

func (_c *MockClient_Set_Call) RunAndReturn(run func(context1 context.Context, s string, v any, duration time.Duration) *redis.StatusCmd) *MockClient_Set_Call {
	_c.Call.Return(run)
	return _c
}
